// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// gradient_beta_psi_mu2
arma::vec gradient_beta_psi_mu2(arma::vec Y, arma::vec X, double beta, double psi, double mu2, int n);
RcppExport SEXP _m6Amonster_gradient_beta_psi_mu2(SEXP YSEXP, SEXP XSEXP, SEXP betaSEXP, SEXP psiSEXP, SEXP mu2SEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< double >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(gradient_beta_psi_mu2(Y, X, beta, psi, mu2, n));
    return rcpp_result_gen;
END_RCPP
}
// log_factorial
double log_factorial(int Y);
RcppExport SEXP _m6Amonster_log_factorial(SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(log_factorial(Y));
    return rcpp_result_gen;
END_RCPP
}
// log_factorial_calculated
arma::vec log_factorial_calculated(int N);
RcppExport SEXP _m6Amonster_log_factorial_calculated(SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(log_factorial_calculated(N));
    return rcpp_result_gen;
END_RCPP
}
// LogLikelihood_beta_psi_mu2
double LogLikelihood_beta_psi_mu2(arma::vec Y, arma::vec X, double beta, double psi, double mu2, int n, double sum_log_factorial_Y);
RcppExport SEXP _m6Amonster_LogLikelihood_beta_psi_mu2(SEXP YSEXP, SEXP XSEXP, SEXP betaSEXP, SEXP psiSEXP, SEXP mu2SEXP, SEXP nSEXP, SEXP sum_log_factorial_YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< double >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type sum_log_factorial_Y(sum_log_factorial_YSEXP);
    rcpp_result_gen = Rcpp::wrap(LogLikelihood_beta_psi_mu2(Y, X, beta, psi, mu2, n, sum_log_factorial_Y));
    return rcpp_result_gen;
END_RCPP
}
// select_stepsize_for_beta
double select_stepsize_for_beta(arma::vec Y, arma::vec X, double gra_beta, double ll, double beta, double psi, double mu2, int n, double gamma, double sum_log_factorial_Y, double down);
RcppExport SEXP _m6Amonster_select_stepsize_for_beta(SEXP YSEXP, SEXP XSEXP, SEXP gra_betaSEXP, SEXP llSEXP, SEXP betaSEXP, SEXP psiSEXP, SEXP mu2SEXP, SEXP nSEXP, SEXP gammaSEXP, SEXP sum_log_factorial_YSEXP, SEXP downSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type gra_beta(gra_betaSEXP);
    Rcpp::traits::input_parameter< double >::type ll(llSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< double >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type sum_log_factorial_Y(sum_log_factorial_YSEXP);
    Rcpp::traits::input_parameter< double >::type down(downSEXP);
    rcpp_result_gen = Rcpp::wrap(select_stepsize_for_beta(Y, X, gra_beta, ll, beta, psi, mu2, n, gamma, sum_log_factorial_Y, down));
    return rcpp_result_gen;
END_RCPP
}
// select_stepsize_for_psi
double select_stepsize_for_psi(arma::vec Y, arma::vec X, double gra_psi, double ll, double beta, double psi, double mu2, int n, double gamma, double sum_log_factorial_Y, double down, double psi_cutoff);
RcppExport SEXP _m6Amonster_select_stepsize_for_psi(SEXP YSEXP, SEXP XSEXP, SEXP gra_psiSEXP, SEXP llSEXP, SEXP betaSEXP, SEXP psiSEXP, SEXP mu2SEXP, SEXP nSEXP, SEXP gammaSEXP, SEXP sum_log_factorial_YSEXP, SEXP downSEXP, SEXP psi_cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type gra_psi(gra_psiSEXP);
    Rcpp::traits::input_parameter< double >::type ll(llSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< double >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type sum_log_factorial_Y(sum_log_factorial_YSEXP);
    Rcpp::traits::input_parameter< double >::type down(downSEXP);
    Rcpp::traits::input_parameter< double >::type psi_cutoff(psi_cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(select_stepsize_for_psi(Y, X, gra_psi, ll, beta, psi, mu2, n, gamma, sum_log_factorial_Y, down, psi_cutoff));
    return rcpp_result_gen;
END_RCPP
}
// select_stepsize_for_mu2
double select_stepsize_for_mu2(arma::vec Y, arma::vec X, double gra_mu2, double ll, double beta, double psi, double mu2, int n, double gamma, double sum_log_factorial_Y, double down);
RcppExport SEXP _m6Amonster_select_stepsize_for_mu2(SEXP YSEXP, SEXP XSEXP, SEXP gra_mu2SEXP, SEXP llSEXP, SEXP betaSEXP, SEXP psiSEXP, SEXP mu2SEXP, SEXP nSEXP, SEXP gammaSEXP, SEXP sum_log_factorial_YSEXP, SEXP downSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type gra_mu2(gra_mu2SEXP);
    Rcpp::traits::input_parameter< double >::type ll(llSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< double >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type sum_log_factorial_Y(sum_log_factorial_YSEXP);
    Rcpp::traits::input_parameter< double >::type down(downSEXP);
    rcpp_result_gen = Rcpp::wrap(select_stepsize_for_mu2(Y, X, gra_mu2, ll, beta, psi, mu2, n, gamma, sum_log_factorial_Y, down));
    return rcpp_result_gen;
END_RCPP
}
// gradient_descent_beta_psi_mu2
arma::vec gradient_descent_beta_psi_mu2(arma::vec Y, arma::vec X, double beta, double psi, double mu2, double gamma, int steps, double sum_log_factorial_Y, double down, double psi_cutoff);
RcppExport SEXP _m6Amonster_gradient_descent_beta_psi_mu2(SEXP YSEXP, SEXP XSEXP, SEXP betaSEXP, SEXP psiSEXP, SEXP mu2SEXP, SEXP gammaSEXP, SEXP stepsSEXP, SEXP sum_log_factorial_YSEXP, SEXP downSEXP, SEXP psi_cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< double >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< int >::type steps(stepsSEXP);
    Rcpp::traits::input_parameter< double >::type sum_log_factorial_Y(sum_log_factorial_YSEXP);
    Rcpp::traits::input_parameter< double >::type down(downSEXP);
    Rcpp::traits::input_parameter< double >::type psi_cutoff(psi_cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(gradient_descent_beta_psi_mu2(Y, X, beta, psi, mu2, gamma, steps, sum_log_factorial_Y, down, psi_cutoff));
    return rcpp_result_gen;
END_RCPP
}
// gradient_descent_alt
arma::vec gradient_descent_alt(arma::vec Y, arma::vec X, double psi, double mu2, double gamma, int steps, double sum_log_factorial_Y, double down, double psi_cutoff);
RcppExport SEXP _m6Amonster_gradient_descent_alt(SEXP YSEXP, SEXP XSEXP, SEXP psiSEXP, SEXP mu2SEXP, SEXP gammaSEXP, SEXP stepsSEXP, SEXP sum_log_factorial_YSEXP, SEXP downSEXP, SEXP psi_cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< double >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< int >::type steps(stepsSEXP);
    Rcpp::traits::input_parameter< double >::type sum_log_factorial_Y(sum_log_factorial_YSEXP);
    Rcpp::traits::input_parameter< double >::type down(downSEXP);
    Rcpp::traits::input_parameter< double >::type psi_cutoff(psi_cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(gradient_descent_alt(Y, X, psi, mu2, gamma, steps, sum_log_factorial_Y, down, psi_cutoff));
    return rcpp_result_gen;
END_RCPP
}
// PoissionGamma
Rcpp::List PoissionGamma(arma::vec Y, arma::vec X, double beta, double psi, double mu2, double gamma, int steps, double down, double psi_cutoff);
RcppExport SEXP _m6Amonster_PoissionGamma(SEXP YSEXP, SEXP XSEXP, SEXP betaSEXP, SEXP psiSEXP, SEXP mu2SEXP, SEXP gammaSEXP, SEXP stepsSEXP, SEXP downSEXP, SEXP psi_cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< double >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< int >::type steps(stepsSEXP);
    Rcpp::traits::input_parameter< double >::type down(downSEXP);
    Rcpp::traits::input_parameter< double >::type psi_cutoff(psi_cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(PoissionGamma(Y, X, beta, psi, mu2, gamma, steps, down, psi_cutoff));
    return rcpp_result_gen;
END_RCPP
}
// Fisher_information_one_beta
arma::mat Fisher_information_one_beta(arma::vec Y, arma::vec X, double beta, double psi, double mu2, int n);
RcppExport SEXP _m6Amonster_Fisher_information_one_beta(SEXP YSEXP, SEXP XSEXP, SEXP betaSEXP, SEXP psiSEXP, SEXP mu2SEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< double >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(Fisher_information_one_beta(Y, X, beta, psi, mu2, n));
    return rcpp_result_gen;
END_RCPP
}
// PoissionGamma_FISHER
Rcpp::List PoissionGamma_FISHER(arma::vec Y, arma::vec X, double beta, double psi, double mu2, double gamma, int steps, double down, double psi_cutoff);
RcppExport SEXP _m6Amonster_PoissionGamma_FISHER(SEXP YSEXP, SEXP XSEXP, SEXP betaSEXP, SEXP psiSEXP, SEXP mu2SEXP, SEXP gammaSEXP, SEXP stepsSEXP, SEXP downSEXP, SEXP psi_cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< double >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< int >::type steps(stepsSEXP);
    Rcpp::traits::input_parameter< double >::type down(downSEXP);
    Rcpp::traits::input_parameter< double >::type psi_cutoff(psi_cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(PoissionGamma_FISHER(Y, X, beta, psi, mu2, gamma, steps, down, psi_cutoff));
    return rcpp_result_gen;
END_RCPP
}
// gradient_and_LogLikelihood_for_individual_sample
Rcpp::List gradient_and_LogLikelihood_for_individual_sample(arma::vec Y, arma::vec W, arma::vec V, arma::vec WY, arma::vec WWY, arma::vec W3Y, arma::vec W4Y, arma::vec VY, arma::vec VVY, arma::vec V3Y, arma::vec V4Y, arma::vec WW, arma::vec W3, arma::vec W4, arma::vec VV, arma::vec V3, arma::vec V4, double a0, double a1, double a2, double a3, double a4, double b1, double b2, double b3, double b4, int n, double sum_log_factorial_Y);
RcppExport SEXP _m6Amonster_gradient_and_LogLikelihood_for_individual_sample(SEXP YSEXP, SEXP WSEXP, SEXP VSEXP, SEXP WYSEXP, SEXP WWYSEXP, SEXP W3YSEXP, SEXP W4YSEXP, SEXP VYSEXP, SEXP VVYSEXP, SEXP V3YSEXP, SEXP V4YSEXP, SEXP WWSEXP, SEXP W3SEXP, SEXP W4SEXP, SEXP VVSEXP, SEXP V3SEXP, SEXP V4SEXP, SEXP a0SEXP, SEXP a1SEXP, SEXP a2SEXP, SEXP a3SEXP, SEXP a4SEXP, SEXP b1SEXP, SEXP b2SEXP, SEXP b3SEXP, SEXP b4SEXP, SEXP nSEXP, SEXP sum_log_factorial_YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type W(WSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type V(VSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type WY(WYSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type WWY(WWYSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type W3Y(W3YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type W4Y(W4YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type VY(VYSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type VVY(VVYSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type V3Y(V3YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type V4Y(V4YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type WW(WWSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type W3(W3SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type W4(W4SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type VV(VVSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type V3(V3SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type V4(V4SEXP);
    Rcpp::traits::input_parameter< double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< double >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< double >::type a2(a2SEXP);
    Rcpp::traits::input_parameter< double >::type a3(a3SEXP);
    Rcpp::traits::input_parameter< double >::type a4(a4SEXP);
    Rcpp::traits::input_parameter< double >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< double >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< double >::type b3(b3SEXP);
    Rcpp::traits::input_parameter< double >::type b4(b4SEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type sum_log_factorial_Y(sum_log_factorial_YSEXP);
    rcpp_result_gen = Rcpp::wrap(gradient_and_LogLikelihood_for_individual_sample(Y, W, V, WY, WWY, W3Y, W4Y, VY, VVY, V3Y, V4Y, WW, W3, W4, VV, V3, V4, a0, a1, a2, a3, a4, b1, b2, b3, b4, n, sum_log_factorial_Y));
    return rcpp_result_gen;
END_RCPP
}
// LogLikelihood_for_individual_sample
double LogLikelihood_for_individual_sample(arma::vec Y, arma::vec W, arma::vec V, arma::vec WW, arma::vec VV, arma::vec W3, arma::vec V3, arma::vec W4, arma::vec V4, double a0, double a1, double a2, double a3, double a4, double b1, double b2, double b3, double b4, int n, double sum_log_factorial_Y);
RcppExport SEXP _m6Amonster_LogLikelihood_for_individual_sample(SEXP YSEXP, SEXP WSEXP, SEXP VSEXP, SEXP WWSEXP, SEXP VVSEXP, SEXP W3SEXP, SEXP V3SEXP, SEXP W4SEXP, SEXP V4SEXP, SEXP a0SEXP, SEXP a1SEXP, SEXP a2SEXP, SEXP a3SEXP, SEXP a4SEXP, SEXP b1SEXP, SEXP b2SEXP, SEXP b3SEXP, SEXP b4SEXP, SEXP nSEXP, SEXP sum_log_factorial_YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type W(WSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type V(VSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type WW(WWSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type VV(VVSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type W3(W3SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type V3(V3SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type W4(W4SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type V4(V4SEXP);
    Rcpp::traits::input_parameter< double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< double >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< double >::type a2(a2SEXP);
    Rcpp::traits::input_parameter< double >::type a3(a3SEXP);
    Rcpp::traits::input_parameter< double >::type a4(a4SEXP);
    Rcpp::traits::input_parameter< double >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< double >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< double >::type b3(b3SEXP);
    Rcpp::traits::input_parameter< double >::type b4(b4SEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type sum_log_factorial_Y(sum_log_factorial_YSEXP);
    rcpp_result_gen = Rcpp::wrap(LogLikelihood_for_individual_sample(Y, W, V, WW, VV, W3, V3, W4, V4, a0, a1, a2, a3, a4, b1, b2, b3, b4, n, sum_log_factorial_Y));
    return rcpp_result_gen;
END_RCPP
}
// select_stepsize_for_a_parameter
double select_stepsize_for_a_parameter(arma::vec Y, arma::vec W, arma::vec V, arma::vec WW, arma::vec VV, arma::vec W3, arma::vec V3, arma::vec W4, arma::vec V4, double ll, double sum_log_factorial_Y, arma::vec gradient, arma::vec parameters, int ind, double gamma, int n, double down);
RcppExport SEXP _m6Amonster_select_stepsize_for_a_parameter(SEXP YSEXP, SEXP WSEXP, SEXP VSEXP, SEXP WWSEXP, SEXP VVSEXP, SEXP W3SEXP, SEXP V3SEXP, SEXP W4SEXP, SEXP V4SEXP, SEXP llSEXP, SEXP sum_log_factorial_YSEXP, SEXP gradientSEXP, SEXP parametersSEXP, SEXP indSEXP, SEXP gammaSEXP, SEXP nSEXP, SEXP downSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type W(WSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type V(VSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type WW(WWSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type VV(VVSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type W3(W3SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type V3(V3SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type W4(W4SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type V4(V4SEXP);
    Rcpp::traits::input_parameter< double >::type ll(llSEXP);
    Rcpp::traits::input_parameter< double >::type sum_log_factorial_Y(sum_log_factorial_YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type gradient(gradientSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< int >::type ind(indSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type down(downSEXP);
    rcpp_result_gen = Rcpp::wrap(select_stepsize_for_a_parameter(Y, W, V, WW, VV, W3, V3, W4, V4, ll, sum_log_factorial_Y, gradient, parameters, ind, gamma, n, down));
    return rcpp_result_gen;
END_RCPP
}
// gradient_descent_for_individual_sample
Rcpp::List gradient_descent_for_individual_sample(arma::vec Y, arma::vec W, arma::vec V, double a0, double a1, double a2, double a3, double a4, double b1, double b2, double b3, double b4, double gamma, int steps, double down);
RcppExport SEXP _m6Amonster_gradient_descent_for_individual_sample(SEXP YSEXP, SEXP WSEXP, SEXP VSEXP, SEXP a0SEXP, SEXP a1SEXP, SEXP a2SEXP, SEXP a3SEXP, SEXP a4SEXP, SEXP b1SEXP, SEXP b2SEXP, SEXP b3SEXP, SEXP b4SEXP, SEXP gammaSEXP, SEXP stepsSEXP, SEXP downSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type W(WSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type V(VSEXP);
    Rcpp::traits::input_parameter< double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< double >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< double >::type a2(a2SEXP);
    Rcpp::traits::input_parameter< double >::type a3(a3SEXP);
    Rcpp::traits::input_parameter< double >::type a4(a4SEXP);
    Rcpp::traits::input_parameter< double >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< double >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< double >::type b3(b3SEXP);
    Rcpp::traits::input_parameter< double >::type b4(b4SEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< int >::type steps(stepsSEXP);
    Rcpp::traits::input_parameter< double >::type down(downSEXP);
    rcpp_result_gen = Rcpp::wrap(gradient_descent_for_individual_sample(Y, W, V, a0, a1, a2, a3, a4, b1, b2, b3, b4, gamma, steps, down));
    return rcpp_result_gen;
END_RCPP
}
// coordinate_descent_for_individual_sample
Rcpp::List coordinate_descent_for_individual_sample(arma::vec Y, arma::vec W, arma::vec V, double a0, double a1, double a2, double a3, double a4, double b1, double b2, double b3, double b4, double gamma, int steps, double down);
RcppExport SEXP _m6Amonster_coordinate_descent_for_individual_sample(SEXP YSEXP, SEXP WSEXP, SEXP VSEXP, SEXP a0SEXP, SEXP a1SEXP, SEXP a2SEXP, SEXP a3SEXP, SEXP a4SEXP, SEXP b1SEXP, SEXP b2SEXP, SEXP b3SEXP, SEXP b4SEXP, SEXP gammaSEXP, SEXP stepsSEXP, SEXP downSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type W(WSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type V(VSEXP);
    Rcpp::traits::input_parameter< double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< double >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< double >::type a2(a2SEXP);
    Rcpp::traits::input_parameter< double >::type a3(a3SEXP);
    Rcpp::traits::input_parameter< double >::type a4(a4SEXP);
    Rcpp::traits::input_parameter< double >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< double >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< double >::type b3(b3SEXP);
    Rcpp::traits::input_parameter< double >::type b4(b4SEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< int >::type steps(stepsSEXP);
    Rcpp::traits::input_parameter< double >::type down(downSEXP);
    rcpp_result_gen = Rcpp::wrap(coordinate_descent_for_individual_sample(Y, W, V, a0, a1, a2, a3, a4, b1, b2, b3, b4, gamma, steps, down));
    return rcpp_result_gen;
END_RCPP
}
// gradient_multiple_beta_psi_mu2
arma::vec gradient_multiple_beta_psi_mu2(arma::vec Y, arma::mat X, arma::vec Xbeta, double psi, double mu2, int n, int k);
RcppExport SEXP _m6Amonster_gradient_multiple_beta_psi_mu2(SEXP YSEXP, SEXP XSEXP, SEXP XbetaSEXP, SEXP psiSEXP, SEXP mu2SEXP, SEXP nSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Xbeta(XbetaSEXP);
    Rcpp::traits::input_parameter< double >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< double >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(gradient_multiple_beta_psi_mu2(Y, X, Xbeta, psi, mu2, n, k));
    return rcpp_result_gen;
END_RCPP
}
// LogLikelihood_multiple_beta_psi_mu2
double LogLikelihood_multiple_beta_psi_mu2(arma::vec Y, arma::vec Xbeta, double psi, double mu2, int n, double sum_log_factorial_Y);
RcppExport SEXP _m6Amonster_LogLikelihood_multiple_beta_psi_mu2(SEXP YSEXP, SEXP XbetaSEXP, SEXP psiSEXP, SEXP mu2SEXP, SEXP nSEXP, SEXP sum_log_factorial_YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Xbeta(XbetaSEXP);
    Rcpp::traits::input_parameter< double >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< double >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type sum_log_factorial_Y(sum_log_factorial_YSEXP);
    rcpp_result_gen = Rcpp::wrap(LogLikelihood_multiple_beta_psi_mu2(Y, Xbeta, psi, mu2, n, sum_log_factorial_Y));
    return rcpp_result_gen;
END_RCPP
}
// select_stepsize_for_multiple_beta
double select_stepsize_for_multiple_beta(arma::vec Y, arma::mat X, arma::vec betas, arma::vec Xbeta, int ind, arma::vec m_gra_beta, double ll, double psi, double mu2, int n, double gamma, double sum_log_factorial_Y, double down);
RcppExport SEXP _m6Amonster_select_stepsize_for_multiple_beta(SEXP YSEXP, SEXP XSEXP, SEXP betasSEXP, SEXP XbetaSEXP, SEXP indSEXP, SEXP m_gra_betaSEXP, SEXP llSEXP, SEXP psiSEXP, SEXP mu2SEXP, SEXP nSEXP, SEXP gammaSEXP, SEXP sum_log_factorial_YSEXP, SEXP downSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type betas(betasSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Xbeta(XbetaSEXP);
    Rcpp::traits::input_parameter< int >::type ind(indSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type m_gra_beta(m_gra_betaSEXP);
    Rcpp::traits::input_parameter< double >::type ll(llSEXP);
    Rcpp::traits::input_parameter< double >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< double >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type sum_log_factorial_Y(sum_log_factorial_YSEXP);
    Rcpp::traits::input_parameter< double >::type down(downSEXP);
    rcpp_result_gen = Rcpp::wrap(select_stepsize_for_multiple_beta(Y, X, betas, Xbeta, ind, m_gra_beta, ll, psi, mu2, n, gamma, sum_log_factorial_Y, down));
    return rcpp_result_gen;
END_RCPP
}
// select_stepsize_for_psi_with_multiple_beta
double select_stepsize_for_psi_with_multiple_beta(arma::vec Y, arma::vec Xbeta, double gra_psi, double ll, double psi, double mu2, int n, double gamma, double sum_log_factorial_Y, double down, double psi_cutoff);
RcppExport SEXP _m6Amonster_select_stepsize_for_psi_with_multiple_beta(SEXP YSEXP, SEXP XbetaSEXP, SEXP gra_psiSEXP, SEXP llSEXP, SEXP psiSEXP, SEXP mu2SEXP, SEXP nSEXP, SEXP gammaSEXP, SEXP sum_log_factorial_YSEXP, SEXP downSEXP, SEXP psi_cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Xbeta(XbetaSEXP);
    Rcpp::traits::input_parameter< double >::type gra_psi(gra_psiSEXP);
    Rcpp::traits::input_parameter< double >::type ll(llSEXP);
    Rcpp::traits::input_parameter< double >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< double >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type sum_log_factorial_Y(sum_log_factorial_YSEXP);
    Rcpp::traits::input_parameter< double >::type down(downSEXP);
    Rcpp::traits::input_parameter< double >::type psi_cutoff(psi_cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(select_stepsize_for_psi_with_multiple_beta(Y, Xbeta, gra_psi, ll, psi, mu2, n, gamma, sum_log_factorial_Y, down, psi_cutoff));
    return rcpp_result_gen;
END_RCPP
}
// select_stepsize_for_mu2_with_multiple_beta
double select_stepsize_for_mu2_with_multiple_beta(arma::vec Y, arma::vec Xbeta, double gra_mu2, double ll, double psi, double mu2, int n, double gamma, double sum_log_factorial_Y, double down);
RcppExport SEXP _m6Amonster_select_stepsize_for_mu2_with_multiple_beta(SEXP YSEXP, SEXP XbetaSEXP, SEXP gra_mu2SEXP, SEXP llSEXP, SEXP psiSEXP, SEXP mu2SEXP, SEXP nSEXP, SEXP gammaSEXP, SEXP sum_log_factorial_YSEXP, SEXP downSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Xbeta(XbetaSEXP);
    Rcpp::traits::input_parameter< double >::type gra_mu2(gra_mu2SEXP);
    Rcpp::traits::input_parameter< double >::type ll(llSEXP);
    Rcpp::traits::input_parameter< double >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< double >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type sum_log_factorial_Y(sum_log_factorial_YSEXP);
    Rcpp::traits::input_parameter< double >::type down(downSEXP);
    rcpp_result_gen = Rcpp::wrap(select_stepsize_for_mu2_with_multiple_beta(Y, Xbeta, gra_mu2, ll, psi, mu2, n, gamma, sum_log_factorial_Y, down));
    return rcpp_result_gen;
END_RCPP
}
// gradient_descent_multiple_beta_psi_mu2
arma::vec gradient_descent_multiple_beta_psi_mu2(arma::vec Y, arma::mat X, arma::vec beta, double psi, double mu2, double gamma, int steps, double sum_log_factorial_Y, int n, int k, double down, double psi_cutoff);
RcppExport SEXP _m6Amonster_gradient_descent_multiple_beta_psi_mu2(SEXP YSEXP, SEXP XSEXP, SEXP betaSEXP, SEXP psiSEXP, SEXP mu2SEXP, SEXP gammaSEXP, SEXP stepsSEXP, SEXP sum_log_factorial_YSEXP, SEXP nSEXP, SEXP kSEXP, SEXP downSEXP, SEXP psi_cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< double >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< int >::type steps(stepsSEXP);
    Rcpp::traits::input_parameter< double >::type sum_log_factorial_Y(sum_log_factorial_YSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type down(downSEXP);
    Rcpp::traits::input_parameter< double >::type psi_cutoff(psi_cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(gradient_descent_multiple_beta_psi_mu2(Y, X, beta, psi, mu2, gamma, steps, sum_log_factorial_Y, n, k, down, psi_cutoff));
    return rcpp_result_gen;
END_RCPP
}
// Fisher_information
arma::mat Fisher_information(arma::vec Y, arma::mat X, arma::vec Xbeta, double psi, double mu2, int n, int k);
RcppExport SEXP _m6Amonster_Fisher_information(SEXP YSEXP, SEXP XSEXP, SEXP XbetaSEXP, SEXP psiSEXP, SEXP mu2SEXP, SEXP nSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Xbeta(XbetaSEXP);
    Rcpp::traits::input_parameter< double >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< double >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(Fisher_information(Y, X, Xbeta, psi, mu2, n, k));
    return rcpp_result_gen;
END_RCPP
}
// PoissionGamma_multiple_beta
Rcpp::List PoissionGamma_multiple_beta(arma::vec Y, arma::mat X, arma::vec beta, double psi, double mu2, double gamma, int steps, double down, double psi_cutoff);
RcppExport SEXP _m6Amonster_PoissionGamma_multiple_beta(SEXP YSEXP, SEXP XSEXP, SEXP betaSEXP, SEXP psiSEXP, SEXP mu2SEXP, SEXP gammaSEXP, SEXP stepsSEXP, SEXP downSEXP, SEXP psi_cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< double >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< int >::type steps(stepsSEXP);
    Rcpp::traits::input_parameter< double >::type down(downSEXP);
    Rcpp::traits::input_parameter< double >::type psi_cutoff(psi_cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(PoissionGamma_multiple_beta(Y, X, beta, psi, mu2, gamma, steps, down, psi_cutoff));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_m6Amonster_gradient_beta_psi_mu2", (DL_FUNC) &_m6Amonster_gradient_beta_psi_mu2, 6},
    {"_m6Amonster_log_factorial", (DL_FUNC) &_m6Amonster_log_factorial, 1},
    {"_m6Amonster_log_factorial_calculated", (DL_FUNC) &_m6Amonster_log_factorial_calculated, 1},
    {"_m6Amonster_LogLikelihood_beta_psi_mu2", (DL_FUNC) &_m6Amonster_LogLikelihood_beta_psi_mu2, 7},
    {"_m6Amonster_select_stepsize_for_beta", (DL_FUNC) &_m6Amonster_select_stepsize_for_beta, 11},
    {"_m6Amonster_select_stepsize_for_psi", (DL_FUNC) &_m6Amonster_select_stepsize_for_psi, 12},
    {"_m6Amonster_select_stepsize_for_mu2", (DL_FUNC) &_m6Amonster_select_stepsize_for_mu2, 11},
    {"_m6Amonster_gradient_descent_beta_psi_mu2", (DL_FUNC) &_m6Amonster_gradient_descent_beta_psi_mu2, 10},
    {"_m6Amonster_gradient_descent_alt", (DL_FUNC) &_m6Amonster_gradient_descent_alt, 9},
    {"_m6Amonster_PoissionGamma", (DL_FUNC) &_m6Amonster_PoissionGamma, 9},
    {"_m6Amonster_Fisher_information_one_beta", (DL_FUNC) &_m6Amonster_Fisher_information_one_beta, 6},
    {"_m6Amonster_PoissionGamma_FISHER", (DL_FUNC) &_m6Amonster_PoissionGamma_FISHER, 9},
    {"_m6Amonster_gradient_and_LogLikelihood_for_individual_sample", (DL_FUNC) &_m6Amonster_gradient_and_LogLikelihood_for_individual_sample, 28},
    {"_m6Amonster_LogLikelihood_for_individual_sample", (DL_FUNC) &_m6Amonster_LogLikelihood_for_individual_sample, 20},
    {"_m6Amonster_select_stepsize_for_a_parameter", (DL_FUNC) &_m6Amonster_select_stepsize_for_a_parameter, 17},
    {"_m6Amonster_gradient_descent_for_individual_sample", (DL_FUNC) &_m6Amonster_gradient_descent_for_individual_sample, 15},
    {"_m6Amonster_coordinate_descent_for_individual_sample", (DL_FUNC) &_m6Amonster_coordinate_descent_for_individual_sample, 15},
    {"_m6Amonster_gradient_multiple_beta_psi_mu2", (DL_FUNC) &_m6Amonster_gradient_multiple_beta_psi_mu2, 7},
    {"_m6Amonster_LogLikelihood_multiple_beta_psi_mu2", (DL_FUNC) &_m6Amonster_LogLikelihood_multiple_beta_psi_mu2, 6},
    {"_m6Amonster_select_stepsize_for_multiple_beta", (DL_FUNC) &_m6Amonster_select_stepsize_for_multiple_beta, 13},
    {"_m6Amonster_select_stepsize_for_psi_with_multiple_beta", (DL_FUNC) &_m6Amonster_select_stepsize_for_psi_with_multiple_beta, 11},
    {"_m6Amonster_select_stepsize_for_mu2_with_multiple_beta", (DL_FUNC) &_m6Amonster_select_stepsize_for_mu2_with_multiple_beta, 10},
    {"_m6Amonster_gradient_descent_multiple_beta_psi_mu2", (DL_FUNC) &_m6Amonster_gradient_descent_multiple_beta_psi_mu2, 12},
    {"_m6Amonster_Fisher_information", (DL_FUNC) &_m6Amonster_Fisher_information, 7},
    {"_m6Amonster_PoissionGamma_multiple_beta", (DL_FUNC) &_m6Amonster_PoissionGamma_multiple_beta, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_m6Amonster(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
